<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2022 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:altova="http://www.altova.com" xmlns:altova-xfi="http://www.altova.com/xslt-extensions/xbrl" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:array="http://www.w3.org/2005/xpath-functions/array" xmlns:base="http://schemas.nav.gov.hu/OSA/3.0/base" xmlns:clitype="clitype" xmlns:common="http://schemas.nav.gov.hu/NTCA/1.0/common" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:math="http://www.w3.org/2005/xpath-functions/math" xmlns:n1="http://schemas.nav.gov.hu/OSA/3.0/data" xmlns:sps="http://www.altova.com/StyleVision/user-xpath-functions" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xff="http://www.xbrl.org/2010/function/formula" xmlns:xfi="http://www.xbrl.org/2008/function/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
    <xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
    <xsl:param name="altova:bGeneratingFromPxf" select="false()"/>
    <xsl:param name="SV_OutputFormat" select="'PDF'"/>
    <xsl:param name="SV_BaseOutputFileName" as="xs:string?">
        <xsl:sequence select="for $i in altovaext:get-base-output-uri(), $j in tokenize( $i, &apos;[/\\]&apos; )[last()] return replace( $j, &apos;\.[^\.\s#%;]*$&apos;, &apos;&apos; )" use-when="function-available(&apos;altovaext:get-base-output-uri&apos;)"/>
    </xsl:param>
    <xsl:param name="SV_GeneratedFileNamePrefix" select="if ( $SV_BaseOutputFileName ) then $SV_BaseOutputFileName else &apos;InvoiceDataTemplate&apos;" as="xs:string?"/>
    <xsl:param name="lang"/>
    <xsl:variable name="XML" select="/"/>
    <xsl:decimal-format name="format1" grouping-separator=" " decimal-separator=","/>
    <xsl:import-schema schema-location="altova://file_resource/NTCA_Github_invoiceData.XSD" use-when="system-property('xsl:is-schema-aware')='yes'" namespace="http://schemas.nav.gov.hu/OSA/3.0/data"/>
    <xsl:variable name="fo:layout-master-set">
        <fo:layout-master-set>
            <fo:simple-page-master master-name="page-master-0-even" margin-left="10mm" margin-right="10mm" page-height="297mm" page-width="210mm" margin-top="8mm" margin-bottom="8mm">
                <fo:region-body margin-top="27mm" margin-bottom="12mm" column-count="1" column-gap="12mm"/>
                <fo:region-before region-name="even-page-header" overflow="hidden" extent="27mm"/>
                <fo:region-after region-name="even-page-footer" overflow="hidden" extent="12mm"/>
            </fo:simple-page-master>
            <fo:simple-page-master master-name="page-master-0-odd" margin-left="10mm" margin-right="10mm" page-height="297mm" page-width="210mm" margin-top="8mm" margin-bottom="8mm">
                <fo:region-body margin-top="27mm" margin-bottom="12mm" column-count="1" column-gap="12mm"/>
                <fo:region-before region-name="odd-page-header" overflow="hidden" extent="27mm"/>
                <fo:region-after region-name="odd-page-footer" overflow="hidden" extent="12mm"/>
            </fo:simple-page-master>
            <fo:page-sequence-master master-name="page-master-0">
                <fo:repeatable-page-master-alternatives>
                    <fo:conditional-page-master-reference master-reference="page-master-0-even" odd-or-even="even"/>
                    <fo:conditional-page-master-reference master-reference="page-master-0-odd" odd-or-even="odd"/>
                </fo:repeatable-page-master-alternatives>
            </fo:page-sequence-master>
        </fo:layout-master-set>
    </xsl:variable>
    <xsl:variable name="altova:nPxPerIn" select="96"/>
    <xsl:variable name="altova:CssImages" select="()"/>
    <xsl:variable name="altova:bDoFirstSectionBreak" as="xs:boolean" select="true()"/>
    <xsl:variable name="altova:sCssSwitch" as="xs:string" select="''"/>
    <xsl:variable name="altova:nodeCssClasses" select="()"/>
    <xsl:variable name="altova:design-xslt-tree-view">
        <altova:main-document url="{if ($SV_BaseOutputFileName) then concat($SV_BaseOutputFileName,'.fo') else ''}">
            <fo:root>
                <xsl:copy-of select="$fo:layout-master-set"/>
                <fo:declarations>
                    <x:xmpmeta xmlns:x="adobe:ns:meta/">
                        <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
                            <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
                                <xmp:CreatorTool>Altova StyleVision Enterprise Edition 2022 (x64) (http://www.altova.com)</xmp:CreatorTool>
                            </rdf:Description>
                        </rdf:RDF>
                    </x:xmpmeta>
                </fo:declarations>
                <fo:page-sequence master-reference="page-master-0" initial-page-number="auto" format="1" force-page-count="no-force">
                    <fo:static-content flow-name="xsl-footnote-separator">
                        <fo:block>
                            <fo:leader leader-pattern="rule" leader-length="100%" rule-style="solid" rule-thickness="0.5pt"/>
                        </fo:block>
                    </fo:static-content>
                    <fo:static-content flow-name="odd-page-header">
                        <fo:block-container overflow="hidden" display-align="before">
                            <fo:block font-family="Roboto" font-size="8pt">
                                <xsl:variable name="altova:table">
                                    <fo:table width="100%" table-layout="fixed" border-spacing="2pt">
                                        <fo:table-column column-width="10%"/>
                                        <fo:table-column column-width="90%"/>
                                        <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                                        <xsl:variable name="altova:ColumnData"/>
                                        <fo:table-body start-indent="0pt">
                                            <fo:table-row height="20mm">
                                                <fo:table-cell height="2cm" padding="2pt" display-align="center">
                                                    <fo:block text-align="left">
                                                        <xsl:variable name="altova:sUrlOrData" select="&apos;/home/icellmobilsoft/img/NAV.png&apos;"/>
                                                        <xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
                                                            <xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
                                                                <xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
                                                                    <xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:sequence select="(0, 0)"/>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                            <xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
                                                        </xsl:variable>
                                                        <fo:external-graphic alignment-baseline="before-edge" content-height="20mm" scaling="non-uniform" content-width="12.5mm">
                                                            <xsl:attribute name="src">
                                                                <xsl:text>url(</xsl:text>
                                                                <xsl:call-template name="altova:double-backslash">
                                                                    <xsl:with-param name="text">
                                                                        <xsl:value-of select="string(&apos;/home/icellmobilsoft/img/NAV.png&apos;)"/>
                                                                    </xsl:with-param>
                                                                    <xsl:with-param name="text-length">
                                                                        <xsl:value-of select="string-length(string(&apos;/home/icellmobilsoft/img/NAV.png&apos;))"/>
                                                                    </xsl:with-param>
                                                                </xsl:call-template>
                                                                <xsl:text>)</xsl:text>
                                                            </xsl:attribute>
                                                        </fo:external-graphic>
                                                        <fo:inline>
                                                            <xsl:text>&#x200B;</xsl:text>
                                                        </fo:inline>
                                                    </fo:block>
                                                </fo:table-cell>
                                                <fo:table-cell font-size="10pt" height="2cm" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                                            <fo:block font-family="Roboto" font-size="16pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="HeaderTemplate_L10N"/>
                                                            </fo:block>
                                                        </xsl:if>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                            <fo:table-row>
                                                <fo:table-cell number-columns-spanned="2" padding="2pt" display-align="center">
                                                    <fo:block>
                                                        <fo:block text-align="center">
                                                            <fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                        </fo:table-body>
                                    </fo:table>
                                </xsl:variable>
                                <xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
                            </fo:block>
                        </fo:block-container>
                    </fo:static-content>
                    <fo:static-content flow-name="even-page-header">
                        <fo:block-container overflow="hidden" display-align="before">
                            <fo:block font-family="Roboto" font-size="8pt">
                                <xsl:variable name="altova:table">
                                    <fo:table width="100%" table-layout="fixed" border-spacing="2pt">
                                        <fo:table-column column-width="10%"/>
                                        <fo:table-column column-width="90%"/>
                                        <xsl:variable name="altova:CurrContextGrid_1" select="."/>
                                        <xsl:variable name="altova:ColumnData"/>
                                        <fo:table-body start-indent="0pt">
                                            <fo:table-row height="20mm">
                                                <fo:table-cell height="2cm" padding="2pt" display-align="center">
                                                    <fo:block text-align="left">
                                                        <xsl:variable name="altova:sUrlOrData" select="&apos;../../img/NAV.png&apos;"/>
                                                        <xsl:variable name="altova:seqWidthHeight" as="xs:integer*">
                                                            <xsl:choose use-when="function-available('altovaext:get-width-and-height-from-image-data')">
                                                                <xsl:when test="unparsed-text-available($altova:sUrlOrData, 'x-binarytobase64')">
                                                                    <xsl:sequence select="altovaext:get-width-and-height-from-image-data(xs:base64Binary(unparsed-text($altova:sUrlOrData, 'x-binarytobase64')))"/>
                                                                </xsl:when>
                                                                <xsl:otherwise>
                                                                    <xsl:sequence select="(0, 0)"/>
                                                                </xsl:otherwise>
                                                            </xsl:choose>
                                                            <xsl:sequence select="(0, 0)" use-when="not(function-available('altovaext:get-width-and-height-from-image-data'))"/>
                                                        </xsl:variable>
                                                        <fo:external-graphic alignment-baseline="before-edge" content-height="20mm" scaling="non-uniform" content-width="12.5mm">
                                                            <xsl:attribute name="src">
                                                                <xsl:text>url(</xsl:text>
                                                                <xsl:call-template name="altova:double-backslash">
                                                                    <xsl:with-param name="text">
                                                                        <xsl:value-of select="string(&apos;../../img/NAV.png&apos;)"/>
                                                                    </xsl:with-param>
                                                                    <xsl:with-param name="text-length">
                                                                        <xsl:value-of select="string-length(string(&apos;../../img/NAV.png&apos;))"/>
                                                                    </xsl:with-param>
                                                                </xsl:call-template>
                                                                <xsl:text>)</xsl:text>
                                                            </xsl:attribute>
                                                        </fo:external-graphic>
                                                        <fo:inline>
                                                            <xsl:text>&#x200B;</xsl:text>
                                                        </fo:inline>
                                                    </fo:block>
                                                </fo:table-cell>
                                                <fo:table-cell font-size="10pt" height="2cm" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                                            <fo:block font-family="Roboto" font-size="16pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="HeaderTemplate_L10N"/>
                                                            </fo:block>
                                                        </xsl:if>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                            <fo:table-row>
                                                <fo:table-cell number-columns-spanned="2" padding="2pt" display-align="center">
                                                    <fo:block>
                                                        <fo:block text-align="center">
                                                            <fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                        </fo:table-body>
                                    </fo:table>
                                </xsl:variable>
                                <xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
                            </fo:block>
                        </fo:block-container>
                    </fo:static-content>
                    <fo:static-content flow-name="odd-page-footer">
                        <fo:block-container height="12mm" overflow="hidden" display-align="after">
                            <fo:block font-family="Roboto" font-size="8pt">
                                <xsl:variable name="altova:table">
                                    <fo:table width="100%" table-layout="fixed" border-spacing="2pt">
                                        <fo:table-column column-width="90%"/>
                                        <fo:table-column column-width="10%"/>
                                        <xsl:variable name="altova:CurrContextGrid_2" select="."/>
                                        <xsl:variable name="altova:ColumnData"/>
                                        <fo:table-body start-indent="0pt">
                                            <fo:table-row>
                                                <fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
                                                    <fo:block>
                                                        <fo:block text-align="center">
                                                            <fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                            <fo:table-row>
                                                <fo:table-cell font-size="10pt" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                                            <fo:block font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="FooterTemplate_L10N"/>
                                                            </fo:block>
                                                            <fo:block font-family="Roboto" font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="InvoiceNumberTemplate_L10N"/>
                                                                <xsl:for-each select="$XML">
                                                                    <xsl:for-each select="n1:InvoiceData">
                                                                        <xsl:for-each select="n1:invoiceNumber">
                                                                            <altova:inline-container-substitute font-weight="bold">
                                                                                <xsl:apply-templates/>
                                                                            </altova:inline-container-substitute>
                                                                        </xsl:for-each>
                                                                    </xsl:for-each>
                                                                </xsl:for-each>
                                                            </fo:block>
                                                        </xsl:if>
                                                    </fo:block>
                                                </fo:table-cell>
                                                <fo:table-cell font-size="10pt" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <fo:block font-family="Roboto" font-size="8pt" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                            <fo:page-number font-family="Roboto" font-size="8pt" font-weight="bold"/>
                                                            <fo:inline font-weight="bold">
                                                                <xsl:text>/</xsl:text>
                                                            </fo:inline>
                                                            <fo:page-number-citation ref-id="SV_RefID_PageTotal" font-family="Roboto" font-size="8pt" font-weight="bold"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                        </fo:table-body>
                                    </fo:table>
                                </xsl:variable>
                                <xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
                            </fo:block>
                        </fo:block-container>
                    </fo:static-content>
                    <fo:static-content flow-name="even-page-footer">
                        <fo:block-container height="12mm" overflow="hidden" display-align="after">
                            <fo:block font-family="Roboto" font-size="8pt">
                                <xsl:variable name="altova:table">
                                    <fo:table width="100%" table-layout="fixed" border-spacing="2pt">
                                        <fo:table-column column-width="90%"/>
                                        <fo:table-column column-width="10%"/>
                                        <xsl:variable name="altova:CurrContextGrid_2" select="."/>
                                        <xsl:variable name="altova:ColumnData"/>
                                        <fo:table-body start-indent="0pt">
                                            <fo:table-row>
                                                <fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
                                                    <fo:block>
                                                        <fo:block text-align="center">
                                                            <fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                            <fo:table-row>
                                                <fo:table-cell font-size="10pt" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <xsl:if test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                                            <fo:block font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="FooterTemplate_L10N"/>
                                                            </fo:block>
                                                            <fo:block font-family="Roboto" font-size="8pt" text-align="center" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                <xsl:call-template name="InvoiceNumberTemplate_L10N"/>
                                                                <xsl:for-each select="$XML">
                                                                    <xsl:for-each select="n1:InvoiceData">
                                                                        <xsl:for-each select="n1:invoiceNumber">
                                                                            <altova:inline-container-substitute font-weight="bold">
                                                                                <xsl:apply-templates/>
                                                                            </altova:inline-container-substitute>
                                                                        </xsl:for-each>
                                                                    </xsl:for-each>
                                                                </xsl:for-each>
                                                            </fo:block>
                                                        </xsl:if>
                                                    </fo:block>
                                                </fo:table-cell>
                                                <fo:table-cell font-size="10pt" padding="0" display-align="center">
                                                    <fo:block text-align="center">
                                                        <fo:block font-family="Roboto" font-size="8pt" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                            <fo:page-number font-family="Roboto" font-size="8pt" font-weight="bold"/>
                                                            <fo:inline font-weight="bold">
                                                                <xsl:text>/</xsl:text>
                                                            </fo:inline>
                                                            <fo:page-number-citation ref-id="SV_RefID_PageTotal" font-family="Roboto" font-size="8pt" font-weight="bold"/>
                                                        </fo:block>
                                                    </fo:block>
                                                </fo:table-cell>
                                            </fo:table-row>
                                        </fo:table-body>
                                    </fo:table>
                                </xsl:variable>
                                <xsl:apply-templates select="$altova:table" mode="altova:copy-table"/>
                            </fo:block>
                        </fo:block-container>
                    </fo:static-content>
                    <fo:flow flow-name="xsl-region-body">
                        <fo:block font-family="Roboto" font-size="8pt">
                            <xsl:choose>
                                <xsl:when test="/*/namespace::*[name()=&apos;&apos;] = &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos; and $lang = (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                    <xsl:for-each select="$XML">
                                        <xsl:for-each select="n1:InvoiceData">
                                            <fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                <xsl:call-template name="InvoiceNumberTemplate_L10N"/>
                                                <xsl:for-each select="n1:invoiceNumber">
                                                    <altova:inline-container-substitute font-weight="bold">
                                                        <xsl:apply-templates/>
                                                    </altova:inline-container-substitute>
                                                </xsl:for-each>
                                            </fo:block>
                                            <fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                <xsl:call-template name="InvoiceIssueDateTemplate_L10N"/>
                                                <xsl:for-each select="n1:invoiceIssueDate">
                                                    <xsl:call-template name="GenericDateOffset_Outer"/>
                                                </xsl:for-each>
                                            </fo:block>
                                            <fo:block margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                <xsl:call-template name="InvoiceClassificationTemplate_C5X"/>
                                            </fo:block>
                                            <xsl:choose>
                                                <xsl:when test="not(exists(n1:invoiceMain/n1:invoice))">
                                                    <xsl:for-each select="n1:invoiceMain">
                                                        <xsl:variable name="maxBatchIndex" select="max(n1:batchInvoice/n1:batchIndex)"/>
                                                        <xsl:for-each-group group-by="n1:batchIndex" select="n1:batchInvoice">
                                                            <xsl:sort select="n1:batchIndex" data-type="number" order="ascending"/>
                                                            <xsl:for-each select="current-group()">
                                                                <fo:block padding-top="0.5cm" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                                                    <xsl:call-template name="BatchIndexTemplate_L10N"/>
                                                                    <xsl:for-each select="n1:batchIndex">
                                                                        <altova:inline-container-substitute font-weight="bold">
                                                                            <xsl:apply-templates/>
                                                                        </altova:inline-container-substitute>
                                                                    </xsl:for-each>
                                                                </fo:block>
                                                                <xsl:apply-templates select="n1:invoice"/>
                                                                <xsl:if test="n1:batchIndex != $maxBatchIndex">
                                                                    <altova:page-break/>
                                                                </xsl:if>
                                                            </xsl:for-each>
                                                        </xsl:for-each-group>
                                                    </xsl:for-each>
                                                </xsl:when>
                                                <xsl:otherwise>
                                                    <xsl:for-each select="n1:invoiceMain">
                                                        <xsl:apply-templates select="n1:invoice"/>
                                                    </xsl:for-each>
                                                </xsl:otherwise>
                                            </xsl:choose>
                                        </xsl:for-each>
                                        <altova:line-break/>
                                    </xsl:for-each>
                                </xsl:when>
                                <xsl:when test="/*/namespace::*[name()=&apos;&apos;] != &apos;http://schemas.nav.gov.hu/OSA/3.0/data&apos;">
                                    <fo:block color="red" font-size="14pt" letter-spacing="2pt" padding-top="2cm" text-align="justify" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                        <xsl:call-template name="NamespaceErrorTemplate_L10N"/>
                                    </fo:block>
                                </xsl:when>
                                <xsl:when test="$lang != (&apos;HU&apos;, &apos;EN&apos;, &apos;DE&apos;)">
                                    <fo:block color="red" font-size="14pt" letter-spacing="2pt" padding-top="2cm" text-align="justify" margin-right="100% - 100%" space-before="0" space-after="0" margin="0pt">
                                        <xsl:call-template name="DisplayErrorTemplate_L10N"/>
                                    </fo:block>
                                </xsl:when>
                            </xsl:choose>
                        </fo:block>
                        <fo:block id="SV_RefID_PageTotal"/>
                    </fo:flow>
                </fo:page-sequence>
            </fo:root>
        </altova:main-document>
    </xsl:variable>
    {{> template_part_1 }}
    {{> template_part_2 }}    
    <xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded" as="xs:double">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), true())"/>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitEmExPercentToPointsUnrounded_AbsentOk" as="xs:double">
        <xsl:param name="sLength" as="xs:string?"/>
        <xsl:choose>
            <xsl:when test="not($sLength)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="altova:MapLengthUnitEmExPercentToPointsUnrounded($sLength)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded" as="xs:double">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, true(), false())"/>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitEmExToPointsUnrounded_AbsentOk" as="xs:double">
        <xsl:param name="sLength" as="xs:string?"/>
        <xsl:choose>
            <xsl:when test="not($sLength)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="altova:MapLengthUnitEmExToPointsUnrounded($sLength)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded" as="xs:double">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), true())"/>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitPercentToPointsUnrounded_AbsentOk" as="xs:double">
        <xsl:param name="sLength" as="xs:string?"/>
        <xsl:choose>
            <xsl:when test="not($sLength)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="altova:MapLengthUnitPercentToPointsUnrounded($sLength)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitToPointsUnrounded" as="xs:double">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:sequence select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitToPointsUnrounded_AbsentOk" as="xs:double">
        <xsl:param name="sLength" as="xs:string?"/>
        <xsl:choose>
            <xsl:when test="not($sLength)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="altova:MapLengthUnitToPointsUnrounded($sLength)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitToPointsUnroundedCore" as="xs:double">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:param name="bAcceptEmEx" as="xs:boolean"/>
        <xsl:param name="bAcceptPercent" as="xs:boolean"/>
        <xsl:variable name="sLengthNormalized" as="xs:string" select="normalize-space($sLength)"/>
        <xsl:choose>
            <xsl:when test="matches($sLengthNormalized, '^\d+(\.\d+)?[a-zA-Z%]+$')">
                <xsl:variable name="nValue" select="number(replace($sLengthNormalized, '([a-zA-Z%])+', ''))"/>
                <xsl:variable name="sUnit" select="replace($sLengthNormalized, '(\d+(\.\d+)?)', '')"/>
                <xsl:choose>
                    <xsl:when test="$sUnit = 'cm'">
                        <xsl:value-of select="altova:MapUnitCmToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'in'">
                        <xsl:value-of select="altova:MapUnitInToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'mm'">
                        <xsl:value-of select="altova:MapUnitMmToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'pc'">
                        <xsl:value-of select="altova:MapUnitPcToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'pt'">
                        <xsl:value-of select="$nValue"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'px'">
                        <xsl:value-of select="altova:MapUnitPxToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'em' and $bAcceptEmEx = true()">
                        <xsl:value-of select="altova:MapUnitEmToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = 'ex' and $bAcceptEmEx = true()">
                        <xsl:value-of select="altova:MapUnitExToPt($nValue)"/>
                    </xsl:when>
                    <xsl:when test="$sUnit = '%' and $bAcceptPercent = true()">
                        <xsl:value-of select="altova:MapUnitPercentToPt($nValue)"/>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="-1"/>
                    </xsl:otherwise>
                </xsl:choose>
            </xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="-1"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitToPointsWithUnit" as="xs:string">
        <xsl:param name="sLength" as="xs:string"/>
        <xsl:variable name="dPoints" as="xs:double" select="altova:MapLengthUnitToPointsUnroundedCore($sLength, false(), false())"/>
        <xsl:sequence select="concat(xs:string(round($dPoints * 100) div 100), 'pt')"/>
    </xsl:function>
    <xsl:function name="altova:MapLengthUnitToPointsWithUnit_AbsentOk" as="xs:string">
        <xsl:param name="sLength" as="xs:string?"/>
        <xsl:choose>
            <xsl:when test="not($sLength)">0</xsl:when>
            <xsl:otherwise>
                <xsl:value-of select="altova:MapLengthUnitToPointsWithUnit($sLength)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
    <xsl:function name="altova:MapUnitCmToPt" as="xs:double">
        <xsl:param name="dCm" as="xs:double"/>
        <xsl:sequence select="altova:MapUnitInToPt($dCm div $altova:nCmPerIn)"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitEmToPt" as="xs:double">
        <xsl:param name="dEm" as="xs:double"/>
        <xsl:sequence select="altova:MapUnitPercentToPt($dEm * $altova:nPercentPerEm)"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitExToPt" as="xs:double">
        <xsl:param name="dEx" as="xs:double"/>
        <xsl:sequence select="altova:MapUnitPercentToPt($dEx * $altova:nPercentPerEx)"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitInToPt" as="xs:double">
        <xsl:param name="dIn" as="xs:double"/>
        <xsl:sequence select="$dIn * $altova:nPtPerIn"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitMmToPt" as="xs:double">
        <xsl:param name="dMm" as="xs:double"/>
        <xsl:sequence select="altova:MapUnitCmToPt($dMm div 10)"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitPcToPt" as="xs:double">
        <xsl:param name="dPc" as="xs:double"/>
        <xsl:sequence select="$dPc * $altova:nPtPerPc"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitPercentToPt" as="xs:double">
        <xsl:param name="dPercent" as="xs:double"/>
        <xsl:sequence select="$dPercent div 100 * $altova:nDefaultFontSizePt"/>
    </xsl:function>
    <xsl:function name="altova:MapUnitPxToPt" as="xs:double">
        <xsl:param name="dPx" as="xs:double"/>
        <xsl:sequence select="$dPx div $altova:nPxPerIn * $altova:nPtPerIn"/>
    </xsl:function>
    <xsl:function name="altova:Sqrt" as="xs:double">
        <xsl:param name="nValue" as="xs:double"/>
        <xsl:sequence select="altova:SqrtRecursive($nValue, $nValue)"/>
    </xsl:function>
    <xsl:function name="altova:SqrtRecursive" as="xs:double">
        <xsl:param name="nValue" as="xs:double"/>
        <xsl:param name="nApprox" as="xs:double"/>
        <xsl:choose>
            <xsl:when test="abs($nApprox * $nApprox - $nValue) lt 0.01">
                <xsl:sequence select="$nApprox"/>
            </xsl:when>
            <xsl:otherwise>
                <xsl:sequence select="altova:SqrtRecursive($nValue, ($nValue div $nApprox + $nApprox) div 2)"/>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:function>
</xsl:stylesheet>